@model DgrosStore.Models.PaginationModel

@{ 
    var PageQuantity = (int)Math.Ceiling((double)Model.TotalRecords / Model.PageRecordNumber);
}

@{ 
    int Initial = 1; //valor inicial
    int Radio = 2;
    var MaxPageQuantity = Radio * 2 + 1; //cantidad a mostrar maxima en el paginador

    int Final = (PageQuantity > MaxPageQuantity) ? MaxPageQuantity : PageQuantity; //si la cantidad de paginas es mayor a la cantidad maxima permitida muestra solamente la cantidad maxima , sino lo contrario

    if(Model.ActualPage > Radio + 1)
    {
        Initial = Model.ActualPage - Radio;
        if(PageQuantity > Model.ActualPage + Radio)
        {
            Final = Model.ActualPage + Radio;
        }
        else
        {
            Final = PageQuantity;
        }
    }
}

<ul class="pagination justify-content-center">
    @if (Model.ActualPage == 1)
    {
        <li class="disabled page-item">@Html.ActionLink("Anterior", null, new { page = 1 }, new { @class = "page-link" })</li>
    }
    else
    {
        <li class="page-item">@Html.ActionLink("Anterior", null, new { page = Model.ActualPage - 1 }, new { @class = "page-link" })</li>
    }
    @for (int i = Initial; i <= Final; i++)
    {
        if (i == Model.ActualPage)
        {
            <li class="page-item active">@Html.ActionLink(i.ToString(), null, new { page = i }, new { @class = "page-link" })</li>
        }
        else
        {
            <li class="page-item">@Html.ActionLink(i.ToString(), null, new { page = i }, new { @class = "page-link" })</li>
        }
    }
    @if (Model.ActualPage == PageQuantity)
    {
        <li class="disabled page-item">@Html.ActionLink("Siguiente", null, new { page = PageQuantity }, new { @class = "page-link" })</li>
    }
    else
    {
        <li class="page-item">@Html.ActionLink("Siguiente", null, new { page = Model.ActualPage + 1 }, new { @class = "page-link" })</li>
    }
</ul>
